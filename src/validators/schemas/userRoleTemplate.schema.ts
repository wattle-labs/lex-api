// Generated by ts-to-zod
import { z } from 'zod';

const objectIdSchema = z.any();

export const userRoleTemplateSchema = z.object({
  id: z.union([z.string(), objectIdSchema]).optional(),
  businessId: z.union([z.string(), objectIdSchema]),
  name: z.string(),
  description: z.string().optional(),
  isSystem: z.boolean(),
  /**
   * Optional parent role for inheritance
   */
  parentRoleId: z.union([z.string(), objectIdSchema]).optional(),
  /**
   * Hierarchy information
   */
  hierarchy: z.object({
    level: z.number(),
    /**
     * Functional area ("legal", "sales")
     */
    domain: z.string().optional(),
    canManageRoles: z.array(z.union([z.string(), objectIdSchema])).optional(),
  }),
  basePermissions: z.array(z.union([z.string(), objectIdSchema])),
  metaPermissions: z
    .object({
      canInviteUsers: z.boolean(),
      canCreateProjects: z.boolean(),
      canAssignRoles: z.boolean(),
    })
    .optional(),
  constraints: z
    .object({
      maxProjects: z.number().optional(),
      regionRestriction: z.string().optional(),
    })
    .optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});
