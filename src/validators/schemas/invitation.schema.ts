// Generated by ts-to-zod
import { z } from 'zod';

const objectIdSchema = z.any();

export const invitationSchema = z.object({
  id: z.union([z.string(), objectIdSchema]).optional(),
  /**
   * Invitee email address
   * @format email
   */
  email: z.string().email(),
  businessId: z.union([z.string(), objectIdSchema]),
  /**
   * Status: "pending", "accepted", "expired", "revoked"
   */
  status: z.string(),
  /**
   * "owner", "admin", "member" - explicit invitation role
   */
  role: z.string(),
  /**
   * Inviter information
   */
  inviter: z.object({
    userId: z.union([z.string(), objectIdSchema]).optional(),
    name: z.string().optional(),
    /**
     * Optional message
     */
    message: z.string().optional(),
  }),
  assignment: z.object({
    /**
     * Role to assign upon acceptance
     */
    roleTemplateId: z.union([z.string(), objectIdSchema]).optional(),
    /**
     * Flag for business ownership
     */
    isOwner: z.boolean(),
    /**
     * Reporting manager
     */
    managerId: z.union([z.string(), objectIdSchema]).optional(),
    /**
     * Assigned department
     */
    departmentId: z.union([z.string(), objectIdSchema]).optional(),
    /**
     * Initial project access grants
     */
    projectAccess: z
      .array(
        z.object({
          /**
           * Project to grant access to
           */
          projectId: z.union([z.string(), objectIdSchema]),
          /**
           * Access types for this project
           */
          accessTypes: z.array(z.string()),
        }),
      )
      .optional(),
  }),
  /**
   * Security details
   */
  security: z.object({
    /**
     * Secure invitation token
     */
    token: z.string(),
    /**
     * Hash for verification
     */
    tokenHash: z.string(),
    /**
     * When invitation was created
     */
    createdAt: z.date().optional(),
    /**
     * When invitation expires
     */
    expiresAt: z.date(),
    /**
     * When invitation was accepted
     */
    usedAt: z.date().optional(),
  }),
  /**
   * Track reminder attempts
   */
  reminders: z
    .array(
      z.object({
        /**
         * When reminder was sent
         */
        sentAt: z.date(),
        /**
         * How reminder was sent
         */
        method: z.string(),
      }),
    )
    .optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});
