// Generated by ts-to-zod
import { z } from 'zod';

const objectIdSchema = z.any();

const clauseSchema = z.any();

/**
 * This interface is used to represent a clause definition in the database. It should not be used to represent a clause instance in a contract.
 * This ** DEFINES ** the clause, i.e., the name, description, etc.
 */
export const clauseDefinitionSchema = z.object({
  id: z.union([z.string(), objectIdSchema]).optional(),
  name: z.string(),
  description: z.string(),
  outputFormat: z.string(),
  sampleOutput: z.array(z.string()).optional(),
  /**
   * Whether the clause is a custom clause, i.e., created by the user (vs. standard, i.e., provided by Clarus)
   * If true, the clause will not be automatically added to new contract types or available to other businesses.
   */
  isCustom: z.boolean().optional(),
  /**
   * True if the clause is an obligation
   */
  isObligation: z.boolean().optional(),
  /**
   * The type of obligation (or other category) of the clause.
   */
  obligationType: z.string().optional(),
  /**
   * The contract types that the clause belongs to / is applicable to. If not specified, the clause will be applicable to all contract types.
   * The key is the contract type id, and the value is true if the clause is applicable to the contract type.
   */
  contractTypes: z
    .union([z.array(z.string()), z.array(objectIdSchema)])
    .optional(),
  /**
   * The business that the clause belongs to. If not specified, the clause will be available to all businesses.
   * MUST be specified if isCustom is true.
   */
  businessId: z.union([z.string(), objectIdSchema]).optional(),
  /**
   * The standard clauses that are based on this clause definition.
   * Will be UNIQUE to a business
   */
  standardClauses: z.array(clauseSchema).optional(),
  /**
   * The example clauses that are based on this clause definition.
   * Will be UNIQUE to a business
   */
  exampleClauses: z.array(clauseSchema).optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
  createdBy: z.string().optional(),
  updatedBy: z.string().optional(),
});
